package Lecture_15;

public class Main {

    public static void main(String[] args) {
        // Создание объекта класса Account
        Account account = new Account(200, "login", 123);

        // Двум потокам по ссылке передаётся один и тот же объект
        SingleThread stOne = new SingleThread(account);
        SingleThread stTwo = new SingleThread(account);

        // Старт обоих потоков
        stOne.getMoneyFromAccount("login", 123, 150);
        stTwo.getMoneyFromAccount("login", 123, 150);
    }
}
/* На экран вывелись такие данные
Account [money = -100]
Account [money = 50]
Это явно ошибочный вывод (в коммите с названием "Здесь потоки работают несогласованно"), так как второй поток не должен был снять денег вообще.

Причины некорректной работы приведенного примера.
Сначала оба потока прошли проверки на корректность логина и пароля.
Так как ни один из них ещё не провёл транзакцию, то проверку на достаточность суммы также прошли оба.
Потом оба прошли транзакцию, и выполнили снятие денег.
Что и привело к такому результату.

Возможные пути исправления.
Описать логику, согласно которой, если один поток (например, 1) начинает выполнение метода этого объекта, то при попытке доступа 2 поток ожидал бы окончания работы потока 1, и только потом мог вызвать этот метод.
Это называется "Синхронизация доступа к объекту".
 */